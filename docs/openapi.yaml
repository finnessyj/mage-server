openapi: 3.0.1
info:
  title: MAGE (Mobile Awareness GEOINT Environment) API
  description: MAGE API
  contact:
    name: MAGE Support
    email: mage@nga.mil
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: 5.2.6
servers:
- url: http://localhost:4242
paths:

  /api/logins:
    get:
      tags: [ Auth ]
      description: >
        Return an array of user login events.  This operation requires
        `READ_USER` permission.
      operationId: getUserLogins
      parameters:
        - name: userId
          in: query
          description: Return only logins for the given `userId`
          schema: { $ref: '#/components/schemas/User/properties/id' }
        - name: deviceId
          in: query
          description: Return only logins from the given `deviceId`
          schema: { $ref: '#/components/schemas/Device/properties/id' }
        - name: startDate
          in: query
          description: ISO 8601 start date to filter (inclusive)
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: ISO 8601 end date filter (exclusive)
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: >
            Limit the number of results to the given value.  The default value
            is `10`.
          schema:
            type: integer
        - name: firstLoginId
          in: query
          description: The ID of the first login in the range of results
          schema: { $ref: '#/components/schemas/Login/properties/id' }
        - name: lastLoginId
          in: query
          description: The ID of the last login in the range of results
          schema: { $ref: '#/components/schemas/Login/properties/id' }
      responses:
        200:
          description: >
            Success - return the array of login events according to the given
            query parameters.
          content:
            application/json:
              schema:
                type: object
                required: [ logins ]
                properties:
                  next:
                    type: string
                    format: uri
                    description: Link to the next chunk of results
                  prev:
                    type: string
                    format: uri
                    description: Link to the previous chunk of results
                  logins:
                    type: array
                    items: { $ref: '#/components/schemas/Login' }

  /api/logout:
    post:
      tags:
      - Auth
      description: Invaldate the auth token for the requesting user.
      operationId: logout
      responses:
        200:
          description: logout response
          content: {}

  /api/users:
    post:
      tags: [ User ]
      description: >
        Create a new user.  Duplicate usernames are not allowed.
        If the requesting user is an admin, i.e., has the `CREATE_USER`
        permission, the user record will be active.  Otherwise, the user will
        be inactive and an admin must activate the user later.  Additionally,
        the `roleId` key is required when the requesting user is an admin.
        Otherwise, the created user receives a default role.  When the request
        body contains `multipart/form-data`, MAGE will handle the `icon` and/or
        `avatar` file form parameters.  The server only sets the user's map
        icon if the requesting user has the `CREATE_USER` permission.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserCreate' }
          multipart/form-data:
            schema: { $ref: '#/components/schemas/UserCreate' }
      responses:
        200:
          description: The created user document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    get:
      tags: [ User ]
      description: >
        Return an array of all users.  The client must have `READ_USER` permission.
      operationId: getUsers
      parameters:
        - in: query
          name: active
          description: Return only active or inactive users.
          schema:
            type: boolean
        - in: query
          name: populate
          description: >
            Pre-populate the given relation keys in the result user documents.
            Currently, this only supports 'roleId'.
          schema: { $ref: '#/components/schemas/CommaSeparatedTokens' }
      responses:
        200:
          description: An array of user documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/users/count:
    get:
      tags: [ User ]
      description: >
        Return the number of users in the database.  The client must
        have `READ_USER` permission.
      operationId: getUserCount
      responses:
        200:
          description: A successful request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Count' }
  /api/users/myself:
    get:
      tags: [ User ]
      description: >
        Return the user document for the requesting user based on the
        provided authentication token.
      operationId: getMyself
      responses:
        200:
          description: The user document for the requesting user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags: [ User ]
      description: >
        Update the user document for the requesting user based on the
        provided authentication token.  This operation does not support
        changing the requesting user's password; use
        `PUT /api/users/myself/password` for that.
      operationId: updateMyself
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserUpdateSelf' }
          multipart/form-data:
            schema: { $ref: '#/components/schemas/UserUpdateSelf' }
      responses:
        200:
          description: The updated user document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/users/myself/password:
    put:
      tags: [ User ]
      description: Update the password for the requesting user.
      operationId: updateMyPassword
      requestBody:
        content:
          application/json:
            schema:
              properties:
                newPassword:
                  type: string
                  format: password
                newPasswordConfirm:
                  type: string
                  format: password
      responses:
        200:
          description: Successful password update; return the user document
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
  /api/users/myself/status:
    put:
      tags: [ User ]
      description: Update the status of the requesting user.
      operationId: updateMyStatus
      requestBody:
        content:
          application/json:
            schema:
              required: [ status ]
              properties:
                status:
                  type: string
      responses:
        200:
          description: Successful status update
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
    delete:
      tags: [ User ]
      description: Delete the status of the requesting user.
      operationId: deleteMyStatus
      responses:
        200:
          description: Successfully deleted status
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
  /api/users/{userId}:
    parameters:
      - { $ref: '#/components/parameters/userIdInPath' }
    get:
      tags:
      - User
      description: >
        Return the user document whose `id` equals the `userId` path parameter.
        The client must have `READ_USER` permission.
      operationId: getUserById
      responses:
        200:
          description: The updated user document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags: [ User ]
      description: >
        Update the user document whose `id` equals the `userId` path parameter.
        The client must have `UPDATE_USER` permission.
      operationId: updateUserById
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserIn' }
          multipart/form-data:
            schema: { $ref: '#/components/schemas/UserIn' }
      responses:
        200:
          description: user update response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags: [ User ]
      description: >
        Delete the user document whose `id` equals the `userId` path parameter.
        The client must have `DELETE_USER` permission.
      operationId: deleteUser
      responses:
        204:
          description: Success - user deleted
          content: {}
  /api/users/{userId}/avatar:
    parameters:
      - { $ref: '#/components/parameters/userIdInPath' }
    get:
      tags: [ User ]
      description: Returns users avatar based on user id
      operationId: getUserAvatar
      responses:
        200:
          description: user avatar response
          content:
            image/*:
              schema:
                type: string
                format: binary
  /api/users/{userId}/icon:
    parameters:
      - { $ref: '#/components/parameters/userIdInPath' }
    get:
      tags: [ User ]
      description: Returns users map icon based on user id
      operationId: getUserIcon
      responses:
        200:
          description: user icon response
          content:
            image/*:
              schema:
                type: string
                format: binary
  /api/users/{userId}/events/{eventId}/recent:
    parameters:
      - { $ref: '#/components/parameters/userIdInPath' }
      - { $ref: '#/components/parameters/eventIdInPath' }
    post:
      tags: [ User ]
      description: >
        Add the given event to top of recent list for the given user.  The list
        is capped at 5.
      operationId: addRecentEventForUser
      responses:
        200:
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /api/devices:
    post:
      tags:
        - Device
      description: >
        Save a new device document in the database.  The request client must
        have `CREATE_DEVICE` permission.
      operationId: createDevice
      requestBody:
        $ref: '#/components/requestBodies/DeviceIn'
      responses:
        200:
          description: new device response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
    get:
      tags:
        - Device
      description: >
        Return an array of all the device documents in the database.  The
        requesting client must have `READ_DEVICE` permission.
      operationId: getDevices
      parameters:
        - in: query
          name: registered
          description: Return only registered or unregistered devices.
          schema: { $ref: '#/components/schemas/Device/properties/registered' }
        - in: query
          name: expand
          description: >
            Comma-separated list of relation keys to populate with related
            documents.  Currently the API only supports the `user` key.
          schema: { $ref: '#/components/schemas/CommaSeparatedTokens' }
      responses:
        200:
          description: Success - an array of device documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
  /api/devices/count:
    get:
      tags:
        - Device
      operationId: getDeviceCount
      description: Return the number of devices in the database.
      responses:
        200:
          description: Success - return the device count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
  /api/devices/{deviceId}:
    parameters:
      - $ref: '#/components/parameters/deviceIdInPath'
    get:
      tags:
        - Device
      description: >
        Return the device document whose ID matches the path parameter for the
        device ID.  The requesting client must have READ_DEVICE permission.
      operationId: getDeviceById
      responses:
        200:
          description: device response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
    put:
      tags:
        - Device
      description: >
        Update a device document whose ID matches the path parameter for the
        device ID.  The requesting client must have `UPDATE_DEVICE` permission.
      operationId: updateDeviceById
      requestBody:
        $ref: '#/components/requestBodies/DeviceIn'
      responses:
        200:
          description: device update response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
    delete:
      tags:
        - Device
      description: >
        Delete a device document whose ID matches the path parameter for the
        device ID.  The requesting client must have `DELETE_DEVICE` permission.
      operationId: deleteDeviceByIds
      responses:
        204:
          description: user deleted
          content: {}

  /api/teams:
    post:
      tags: [ Team ]
      description: >
        Save a new team document to the database.  The requesting user must
        have `CREATE_TEAM` permission.
      operationId: createTeam
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TeamCreate' }
          application/x-www-form-urlencoded:
            schema: { $ref: '#/components/schemas/TeamCreate' }
      responses:
        200:
          description: Success - the created team document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    get:
      tags: [ Team ]
      description: >
        Return all the teams.  The requesting client must have `READ_TEAM`
        permission.
      operationId: getTeams
      responses:
        200:
          description: Success - an array of team documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
  /api/teams/count:
    get:
      tags: [ Team ]
      description: >
        Get the number of teams in the database.  The requesting user must have
        have `READ_TEAM` permission.
      operationId: getTeamCount
      responses:
        200:
          description: Success - return the number of teams
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Count' }
  /api/teams/{teamId}:
    parameters:
      - $ref: '#/components/parameters/teamIdInPath'
    get:
      tags: [ Team ]
      description: >
        Return the team document whose ID matches the team ID path parameter.
        The requesting client must have `READ_TEAM` permission.
      operationId: getTeamById
      responses:
        200:
          description: Success - a team document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    put:
      tags: [ Team ]
      description: >
        Update the team document whose ID matches the team ID in the path.
        The requesting user must have `UPDATE_TEAM` permission.
      operationId: updateTeamById
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TeamIn' }
          application/x-www-form-urlencoded:
            schema: { $ref: '#/components/schemas/TeamIn' }
      responses:
        200:
          description: Success - return the updated team document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    delete:
      tags: [ Team ]
      description: >
        Delete the team document whose ID matches the team ID in the path.  The
        request user must have `DELETE_TEAM` permission.
      operationId: deleteTeam
      responses:
        204:
          description: Success - team deleted
          content: {}
  /api/teams/{teamId}/users:
    parameters:
      - { $ref: '#/components/parameters/teamIdInPath' }
    post:
      tags: [ Team ]
      operationId: addUserToTeam
      description: >
        Add a user to a team.  The request user must have `UPDATE_TEAM`
        permission as well as an ACL entry in the team document with `update`
        permission.
      requestBody:
        description: The user ID reference to add to the target team
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRef'
        required: true
      responses:
        200:
          description: Success - return the updated team document.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Team' }
  /api/teams/{teamId}/users/{userId}:
    parameters:
      - { $ref: '#/components/parameters/teamIdInPath' }
      - { $ref: '#/components/parameters/userIdInPath' }
    delete:
      tags: [ Team ]
      operationId: removeUserFromTeam
      description: >
        Remove a user from a team.  The requesting user must have `UPDATE_TEAM`
        permission as well as an ACL entry in the team document with `update`
        permission.
      responses:
        200:
          description: Success - return the updated team document.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Team' }
  /api/teams/{teamId}/acl/{userId}:
    parameters:
      - { $ref: '#/components/parameters/teamIdInPath' }
      - { $ref: '#/components/parameters/userIdInPath' }
    put:
      tags: [ Team ]
      operationId: setUserAccessForTeam
      description: >
        Update a team ACL entry.  The requesting user must have `UPDATE_TEAM`
        permission, as well as an ACL entry in the team document with `update`
        permission.
      requestBody:
        $ref: '#/components/requestBodies/ACLRoleUpdate'
      responses:
        200:
          description: Success - return the updated team document.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Team' }
    delete:
      tags: [ Team ]
      operationId: removeUserAccessFromTeam
      description: >
        Delete a team ACL entry.  The requesting user must have `UPDATE_TEAM`
        permission, as well as an ACL entry in the team document with `update`
        permission.
      responses:
        200:
          description: Success - return the updated team document.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Team' }

  /api/events:
    post:
      tags: [ Event ]
      operationId: createEvent
      description: >
        Create a new event.  The requesting user must have `CREATE_EVENT`
        permission.  MAGE assigns the requesting user to the event's ACL with
        the `OWNER` role.  Creating a new event implicitly creates a team
        coupled to the event by the team's `teamEventId` property.  One can
        add users to this team to allow access to the event on an individual
        basis.  This allows team and user access management to remain
        consistent across the API without having to maintain a list of users
        separately for each event.
      requestBody:
        description: The new event document
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreate'
        required: true
      responses:
        201:
          description: Success - return the created event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    get:
      tags: [ Event ]
      description: >
        Get all of the MAGE server's events.  The requesting user must have
        `READ_EVENT_ALL` permission and an ACL entry on the even with `read`
        permission.
      operationId: getEvents
      parameters:
        - in: query
          name: projection
          schema:
            type: string
        - in: query
          name: state
          schema:
            type: string
            enum: [ active, complete ]
        - in: query
          name: userId
          schema:
            $ref: '#/components/schemas/User/properties/id'
          description: >
            Return only events the given user can access.
        - in: query
          name: populate
          schema:
            type: boolean
          description: >
            When omitted or not `false`, populate the teams and layers related
            to each event.  Otherwise, the event documents will only contain
            the IDs of the related teams and layers.  When populated, the
            event documents will contain the `teams` and `layers` keys mapped to
            arrays of their respective documents.  When not populated, the
            event documents will contain the `eventIds` and `layerIds` keys
            mapped to arrays of ID strings.  Populated team documents will NOT
            contain populated user documents.
      responses:
        200:
          description: Success - return an array of event documents.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /api/events/count:
    get:
      tags: [ Event ]
      description: >
        Get the number of events in the database.  The requesting user must
        have `READ_EVENT_ALL` permission.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
  /api/events/{eventId}:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
    get:
      tags: [ Event ]
      description: >
        Return the event with the ID specified in the path.  The requesting
        user must have `READ_EVENT_ALL` permission and an ACL entry with `read`
        permission on the even.
      operationId: getEventById
      parameters:
        - in: query
          name: populate
          schema:
            type: boolean
          description: >
            When omitted or not `false`, populate the teams and layers related
            to each event.  Otherwise, the event documents will only contain
            the IDs of the related teams and layers.  When populated, the
            event documents will contain the `teams` and `layers` keys mapped to
            with arrays of their respective documents.  When not populated, the
            event documents will contain the `eventIds` and `layerIds` keys
            mapped to arrays of ID strings.  Populated team documents will NOT
            contain populated user documents.
        - in: query
          name: projection
          schema:
            type: string
      responses:
        200:
          description: Sucess - return the event document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    put:
      tags: [ Event ]
      description: >
        Update the event with the ID specified in the path.  The requesting
        user must have `UPDATE_EVENT` permission and an ACL entry on the event
        with `update` permission.
      operationId: updateEventById
      requestBody:
        description: event update body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUpdate'
        required: true
      responses:
        200:
          description: Success - return the update event document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    delete:
      tags: [ Event ]
      description: >
        Delete the event with the ID specified in the path.  The requesting
        user must have `DELETE_EVENT` permission and an ACL entry on the event
        with `delete` permission.
      operationId: deleteEvent
      responses:
        204:
          description: Success - event deleted
          content: {}
  /api/events/{eventId}/forms:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
    post:
      tags: [ Event ]
      description: >
        Add a form to the specified event.  The requesting user must have
        `UPDATE_EVENT` permission and an ACL entry on the event with `update`
        permission.
      operationId: addFormToEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FormImport'
      responses:
        201:
          description: Success - return the updated event document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /api/events/{eventId}/forms/{formId}:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
      - $ref: '#/components/parameters/formIdInPath'
    put:
      tags: [ Event ]
      operationId: updateFormById
      description: >
        Update the specified form for the specified event.  The requesting
        client must have `UPDATE_EVENT` permission and an ACL entry on the
        event with `update` permission.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Form'
      responses:
        200:
          description: Success - return the updated form document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Form'
  /api/events/{eventId}/{formId}/form.zip:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
      - $ref: '#/components/parameters/formIdInPath'
    get:
      tags: [ Event ]
      operationId: exportForm
      description: >
        Export a zip archive of the form.  The zip file includes metadata and
        map symbology icons in the following layout.
        ```
        form/form.json # the form document
        icons/ # a directory that contains the form's icon image files
        icons/icon.png
        # icon for 'primary_1' primary value with no variant value
        icons/<primary_1>/icon.png
        # icon for 'primary_1' primary value with 'variant_1' variant value
        icons/<primary_1>/<variant_1>/icon.png
        # icon for 'primary_1' primary value with 'variant_2' variant value
        icons/<primary_1>/<variant_2>/icon.png
        ...
        # and so on for any combination of primary and variant field values
        # that one wishes to have a specific map icon
        icons/<primary_n>/<variant_n>/icon.png
        ```
        The `<primary_x>` and `<variant_x>` directory components above are
        named after the choice values of the form's primary and variant
        select fields, respectively.  Each `primary_x/variant_x` directory
        contains the map icon image that MAGE clients will use to represent
        observations with those values on a map.  MAGE clients will use the
        form's default icon image to represent primary/variant combinations
        that are not present in the `icons` directory.  The requesting user
        must have `READ_EVENT_ALL` permission and an ACL entry with `read`
        permission on the event.
      responses:
        200:
          description: >
            Success - return a zip file of the form meta-data and icons.
          content:
            application/zip:
              schema:
                type: string
                format: binary
  /api/events/{eventId}/form/icons.zip:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
    get:
      tags: [ Event ]
      operationId: getEventIcons
      description: >
        Get a zip file containing all the map icons for the forms of an event.
        The requesting user must have `READ_EVENT_ALL` permission and an ACL
        entry with `read` permission on the event.  The top level of the zip
        file will contain one directory entry, `icons/`, which contains the
        icon files under directories named according to primary and variant
        field values as described above in the `exportForm` operation.
      responses:
        200:
          description: Success - return a zip file of icon images for the event.
          content:
            application/zip:
              schema:
                type: string
                format: binary
  /api/events/{eventId}/icons/{formId}.json:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
      - $ref: '#/components/parameters/formIdInPath'
    get:
      tags: [ Event ]
      operationId: getFormIcons
      description: >
        Return all the icons for the specified form as base-64 strings in a
        JSON document.  The requesting user must have `READ_EVENT_ALL`
        permission and an ACL entry with `read` permission on the event.
      responses:
        200:
          description: Success - return the array of form icons.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormIconEmbedded'
  /api/events/{eventId}/icons:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
    post:
      tags: [ Event ]
      operationId: uploadEventIcon
      description: >
        Upload the default icon for the specified event.  The requesting user
        must have `UPDATE_EVENT` permission and an ACL entry on the event with
        `update` permission.
      requestBody:
        $ref: '#/components/requestBodies/FormIconUpload'
      responses:
        200:
          $ref: '#/components/responses/FormIconInfo'
    get:
      tags: [ Event ]
      operationId: getEventIcon
      description: >
        Get the default icon image for the specified event.  The requesting user
        must have `READ_EVENT_ALL` permission and an ACL entry on the event with
        `read` permission.
      responses:
        200:
          $ref: '#/components/responses/FormIconContent'
    delete:
      tags: [ Event ]
      operationId: deleteEventIcon
      description: >
        Delete the default icon from the specified event.  The requesting user
        must have `UPDATE_EVENT` permission and an ACL entry on the event with
        `update` permission.
      responses:
        204:
          description: Success - icon deleted.
          content: {}
  /api/events/{eventId}/icons/{formId}:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
      - $ref: '#/components/parameters/formIdInPath'
    post:
      tags: [ Event ]
      operationId: uploadDefaultFormIcon
      description: >
        Upload the default icon for the specified form.  The requesting user
        must have 'UPDATE_EVENT' permission and an ACL entry on the event with
        `update` permission.
      requestBody:
        $ref: '#/components/requestBodies/FormIconUpload'
      responses:
        200:
          $ref: '#/components/responses/FormIconInfo'
    get:
      tags: [ Event ]
      operationId: getDefaultFormIcon
      description: >
        Get the default icon for the specified form.  The requesting user must
        have `READ_EVENT_ALL` permission and an ACL entry on the event with
        `read` permission.
      responses:
        200:
          $ref: '#/components/responses/FormIconContent'
    delete:
      tags: [ Event ]
      operationId: deleteDefaultFormIcon
      description: >
        Delete the default icon from the form.  The requesting user must have
        `UPDATE_EVENT` permission and an ACL entry on the event with `update`
        permission.
      responses:
        204:
          description: Success - icon deleted.
          content: {}
  /api/events/{eventId}/icons/{formId}/{primary}:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
      - $ref: '#/components/parameters/formIdInPath'
      - $ref: '#/components/parameters/primaryFieldValueInPath'
    post:
      tags: [ Event ]
      operationId: uploadPrimaryFormIcon
      requestBody:
        $ref: '#/components/requestBodies/FormIconUpload'
      responses:
        200:
          $ref: '#/components/responses/FormIconInfo'
    get:
      tags: [ Event ]
      operationId: getPrimaryFormIcon
      description: >
        Get the default icon for the specified form.  The requesting user must
        have `READ_EVENT_ALL` permission and an ACL entry on the event with
        `read` permission.
      responses:
        200:
          $ref: '#/components/responses/FormIconContent'
    delete:
      tags: [ Event ]
      operationId: deletePrimaryFormIcon
      description: >
        Delete the primary icon from the form.  The requesting user must have
        `UPDATE_EVENT` permission and an ACL entry on the event with `update`
        permission.
      responses:
        204:
          description: Success - icon deleted.
          content: {}
  /api/events/{eventId}/icons/{formId}/{primary}/{variant}:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
      - $ref: '#/components/parameters/formIdInPath'
      - $ref: '#/components/parameters/primaryFieldValueInPath'
      - $ref: '#/components/parameters/variantFieldValueInPath'
    post:
      tags: [ Event ]
      operationId: uploadVariantFormIcon
      description: >
        Upload the icon image associated with the specified primary + variant
        field value combination.
      responses:
        200:
          $ref: '#/components/responses/FormIconInfo'
    get:
      tags: [ Event ]
      operationId: getVariantFormIcon
      description: >
        Get the variant icon for the specified form.  The requesting user must
        have `READ_EVENT_ALL` permission and an ACL entry on the event with
        `read` permission.
      responses:
        200:
          $ref: '#/components/responses/FormIconContent'
    delete:
      tags: [ Event ]
      operationId: deleteVariantFormIcon
      description: >
        Delete the variant icon from the form.  The requesting user  must have
        `UPDATE_EVENT` permission and an ACL entry on the event with `update`
        permission.
      responses:
        204:
          description: Success - icon deleted.
          content: {}
  /api/events/{eventId}/layers:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
    post:
      tags: [ Event ]
      operationId: addLayerToEvent
      description: >
        Add a layer to the specified event.  The requesting user must have
        `UPDATE_EVENT` permission and an ACL entry on the event with `update`
        permission.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LayerRef'
        required: true
      responses:
        200:
          description: Success - return the updated event document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /api/events/{eventId}/layers/{layerId}:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
      - $ref: '#/components/parameters/layerIdInPath'
    delete:
      tags: [ Event ]
      operationId: removeLayerFromEvent
      description: >
        Remove the specified layer from the specified event.  The requesting
        user must have `UPDATE_EVENT` permission and an ACL entry on the event
        with `update` permission.
      responses:
        200:
          description: Success - return the updated event document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /api/events/{eventId}/users:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
    get:
      tags: [ Event ]
      operationId: getUsersForEvent
      description: >
        Get a flat list of all the users of all the teams with access to the
        specified event.  The requesting user must have `READ_EVENT_ALL`
        permission and an ACL entry on the event with `read` permission.
      responses:
        200:
          description: Success - return an array of user documents.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/events/{eventId}/teams:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
    post:
      tags: [ Event ]
      operationId: addTeamToEvent
      description: >
        Add a team to the specified event.  The requesting user must have
        `UPDATE_EVENT` permission and an ACL entry on the event with `update`
        permission.  All of the team's members will have access to the event.
      requestBody:
        description: >
          Document referencing the ID of the team to add to the event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamRef'
        required: true
      responses:
        200:
          description: Success - return the updated event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    get:
      tags: [ Event ]
      operationId: getTeamsForEvent
      description: >
        Get the teams with access to the specified event.  The requesting user
        must have `READ_EVENT_ALL` permission and an ACL entry on the event
        with `read` permission.
      parameters:
        - in: query
          name: populate
          description: >
            The `populate` parameter is a comma-separated list of keys in the
            returned team documents to populate with their referenced documents.
            When the value of `populate` includes `users`, MAGE will populate
            the returned team documents with the user documents they reference,
            replacing the `userIds` key in each team document with `users`.
          schema:
            type: string
            enum:
              - users
      responses:
        200:
          description: Success - return an array of team documents.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
  /api/events/{eventId}/teams/{teamId}:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
      - $ref: '#/components/parameters/teamIdInPath'
    delete:
      tags: [ Event ]
      operationId: removeTeamFromEvent
      description: >
        Remove the specified team from the specified event.  The requesting
        user must have `UPDATE_EVENT` permission and an ACL entry on the event
        with `update` permission.
      responses:
        200:
          description: Success - return the updated team document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /api/events/{eventId}/acl/{userId}:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
      - $ref: '#/components/parameters/userIdInPath'
    put:
      tags: [ Event ]
      operationId: setUserAccessForEvent
      description: >
        Set the specified user's ACL role on the specified event.  The
        requesting user must have `UPDATE_EVENT` permission and an ACL entry on
        the event with `update` permission.
      requestBody:
        $ref: '#/components/requestBodies/ACLRoleUpdate'
      responses:
        200:
          description: Success - return the updated event document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    delete:
      tags: [ Event ]
      operationId: removeUserAccessFromEvent
      description: >
        Remove the specified user's ACL role from the specified event.  The
        requesting user must have `UPDATE_EVENT` permission and an ACL entry on
        the event with `update` permission.
      responses:
        200:
          description: Success - return the updated event document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /api/events/{eventId}/observations/id:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
    post:
      tags: [ Observation ]
      operationId: createObservationId
      description: >
        Generate a new observation ID with which to save a new observation.
      responses:
        200:
          description: new observation location
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
  /api/events/{eventId}/observations/{observationId}:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
      - $ref: '#/components/parameters/observationIdInPath'
    put:
      tags: [ Observation ]
      operationId: saveObservation
      description: >
        Create or update an observation with the specified observation ID for
        the specified event.  To create an observation, the requesting user
        must have `CREATE_OBSERVATION` permission and must be a member of a
        team with access to the event.  To update an observation, the
        requesting user must have `UPDATE_OBSERVATION_ALL` permission, or have
        `UPDATE_OBSERVATION_EVENT` permission as well as an ACL entry on the
        event with `read` permission or be a member of a team with access to
        the event.
      requestBody:
        description: The observation properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Observation'
        required: true
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
    get:
      tags: [ Observation ]
      description: get observation for eventId
      operationId: getObservation
      parameters:
      - name: observationId
        in: path
        description: observationId for observation
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: feature fields to project in response (JSON)
        schema:
          type: string
      - name: startDate
        in: query
        schema:
          type: string
          format: dateTime
      - name: endDate
        in: query
        schema:
          type: string
          format: dateTime
      - name: bbox
        in: query
        description: bounding box array [minx,miny,maxx,maxy]
        style: form
        explode: false
        schema:
          type: array
          items:
            type: number
      - name: states
        in: query
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
  /api/events/{eventId}/observations:
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
    get:
      tags: [ Observation ]
      description: get all observations for event
      operationId: getObservations
      parameters:
        - in: query
          name: fields
          description: feature fields to project in response (JSON)
          schema:
            type: string
        - in: query
          name: startDate
          schema:
            type: string
            format: dateTime
        - in: query
          name: endDate
          schema:
            type: string
            format: dateTime
        - in: query
          name: bbox
          description: bounding box array [minx,miny,maxx,maxy]
          style: form
          explode: false
          schema:
            type: array
            items:
              type: number
        - in: query
          name: states
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feature'
    post:
      tags: [ Observation ]
      description: add new observation
      operationId: addObservationDeprecated
      requestBody:
        description: observation request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
        required: true
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
      deprecated: true
  /api/events/{eventId}/observations/id/{observationId}/:
    put:
      tags:
      - Observation
      description: update observation for eventId
      operationId: updateObservation
      parameters:
      - name: eventId
        in: path
        description: eventId in which to update observation
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation
        required: true
        schema:
          type: string
      requestBody:
        description: observation request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
        required: true
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
  /api/events/{eventId}/observations/{observationId}/favorite:
    put:
      tags:
      - Observation
      description: favorite observation for provided event
      operationId: addFavoriteObservation
      parameters:
      - name: eventId
        in: path
        description: eventId in which to observation lives
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation to favorite
        required: true
        schema:
          type: string
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureState'
    delete:
      tags:
      - Observation
      description: remove favorite for observation for provided event
      operationId: removeFavoriteObservation
      parameters:
      - name: eventId
        in: path
        description: eventId in which to observation lives
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation to remove favorite
        required: true
        schema:
          type: string
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureState'
  /api/events/{eventId}/observations/{observationId}/important:
    put:
      tags:
      - Observation
      description: add/update important on provided observation for provided event
      operationId: addObservationImportant
      parameters:
      - name: eventId
        in: path
        description: eventId in which to add/update observation important
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation
        required: true
        schema:
          type: string
      requestBody:
        description: important request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationImportantCreate'
        required: true
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureState'
    delete:
      tags:
      - Observation
      description: remove important on provided observation for provided event
      operationId: removeObservationImportant
      parameters:
      - name: eventId
        in: path
        description: eventId in which to remove observation important
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation
        required: true
        schema:
          type: string
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureState'
  /api/events/{eventId}/observations/{observationId}/states:
    post:
      tags:
      - Observation
      description: update state on provided observation for provided event
      operationId: addObservationState
      parameters:
      - name: eventId
        in: path
        description: eventId in which to update observation state
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation
        required: true
        schema:
          type: string
      requestBody:
        description: state request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureStateCreate'
        required: true
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureState'
  /api/events/{eventId}/observations/{observationId}/attachments:
    get:
      tags:
      - Observation
      description: get attachments for observation in event
      operationId: getAttachments
      parameters:
      - name: eventId
        in: path
        description: eventId in which to retrieve observation attachments
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation
        required: true
        schema:
          type: string
      responses:
        200:
          description: attachment response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attachment'
    post:
      tags:
      - Observation
      description: add new attachment
      operationId: addAttachment
      parameters:
      - name: eventId
        in: path
        description: eventId in which to create attachment
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId in which to create attachment
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - attachment
              properties:
                attachment:
                  type: string
                  description: attachment
                  format: binary
        required: true
      responses:
        200:
          description: attachment response
          content: {}
  /api/events/{eventId}/observations/{observationId}/attachments/{attachmentId}:
    get:
      tags:
      - Observation
      description: get attachment for observation in event
      operationId: getAttachment
      parameters:
      - name: eventId
        in: path
        description: eventId in which to retrieve observation
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation
        required: true
        schema:
          type: string
      - name: attachmentId
        in: path
        description: id of attachment to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: attachment response
          content: {}
    put:
      tags:
      - Observation
      description: update attachment for observation in event
      operationId: updateAttachment
      parameters:
      - name: eventId
        in: path
        description: eventId in which to update observation attachment
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation
        required: true
        schema:
          type: string
      - name: attachmentId
        in: path
        description: id of attachment to update
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
              - attachment
              properties:
                attachment:
                  type: string
                  description: attachment
                  format: binary
        required: true
      responses:
        200:
          description: attachment response
          content: {}
    delete:
      tags:
      - Observation
      description: delete attachment for observation in event
      parameters:
      - name: eventId
        in: path
        description: eventId in which to retrieve features
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for feature
        required: true
        schema:
          type: string
      - name: attachmentId
        in: path
        description: id of attachment to update
        required: true
        schema:
          type: string
      responses:
        200:
          description: attachment delete
          content: {}
  /api/layers:
    get:
      tags:
      - Layer
      description: get all layers
      operationId: getLayers
      parameters:
      - name: type
        in: query
        description: layer type filter, i.e. Imagery or Feature
        schema:
          type: string
      responses:
        200:
          description: layer response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layer'
    post:
      tags:
      - Layer
      description: add new layer
      operationId: addLayer
      requestBody:
        description: new layer body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LayerCreate'
        required: true
      responses:
        200:
          description: new layer response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layer'
  /api/layers/{id}:
    get:
      tags:
      - Layer
      description: Returns a single layer based on id
      operationId: getLayerById
      parameters:
      - name: id
        in: path
        description: id of layer to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: layer response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layer'
    put:
      tags:
      - Layer
      description: update a single layer based on id
      operationId: updateLayerById
      parameters:
      - name: id
        in: path
        description: id of layer to update
        required: true
        schema:
          type: string
      requestBody:
        description: layer update body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LayerCreate'
        required: true
      responses:
        200:
          description: layer update response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layer'
    delete:
      tags:
      - Layer
      description: deletes a single layer based on id
      operationId: deleteLayer
      parameters:
      - name: id
        in: path
        description: id of layer to delete
        required: true
        schema:
          type: string
      responses:
        204:
          description: layer deleted
          content: {}
  /api/events/{eventId}/layers/{layerId}/features:
    get:
      tags:
      - Layer
      description: get features for specified layer in event
      operationId: getFeaturesForLayer
      parameters:
      - name: eventId
        in: path
        description: id of the event to get features for
        required: true
        schema:
          type: number
      - name: layerId
        in: path
        description: id of the layer to get features for
        required: true
        schema:
          type: number
      responses:
        200:
          description: feature responses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feature'
  /api/events/{eventId}/locations:
    get:
      tags:
      - Location
      description: get all locations
      operationId: getLocations
      parameters:
      - name: eventId
        in: path
        description: id of event to get locations for
        required: true
        schema:
          type: number
      - name: startDate
        in: query
        schema:
          type: string
          format: dateTime
      - name: endDate
        in: query
        schema:
          type: string
          format: dateTime
      - name: lastLocationId
        in: query
        description: locationId of last item in previous page (paging)
        schema:
          type: string
      - name: limit
        in: query
        description: limit locations (paging)
        schema:
          type: number
      responses:
        200:
          description: location response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feature'
    post:
      tags:
      - Location
      description: add new location for current user in the specified event
      operationId: addLocation
      parameters:
      - name: eventId
        in: path
        description: id of event to post location to
        required: true
        schema:
          type: number
      requestBody:
        description: new location body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
        required: true
      responses:
        200:
          description: location response
          content: {}
  /api/events/{eventId}/locations/users:
    get:
      tags:
      - Location
      description: get all locations grouped by user
      operationId: getLocationsByUser
      parameters:
      - name: eventId
        in: path
        description: id of event to update location to
        required: true
        schema:
          type: number
      - name: startDate
        in: query
        schema:
          type: string
          format: dateTime
      - name: endDate
        in: query
        schema:
          type: string
          format: dateTime
      - name: lastLocationId
        in: query
        description: locationId of last item in previous page (paging)
        schema:
          type: string
      - name: limit
        in: query
        description: limit locations (paging)
        schema:
          type: number
      responses:
        200:
          description: location response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feature'
  /api/roles:
    get:
      tags:
      - Role
      description: get all roles
      operationId: getRoles
      responses:
        200:
          description: role response
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Role' }
  /api/roles/{id}:
    get:
      tags:
      - Role
      description: get role by id
      operationId: getRoleById
      parameters:
      - name: id
        in: path
        description: id of role to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: role response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
  /api/settings:
    get:
      tags:
      - Settings
      description: get settings
      operationId: getSettings
      responses:
        200:
          description: export response
          content: {}
  /api/settings/{type}:
    get:
      tags:
      - Settings
      description: get settings by type
      operationId: getSettingByType
      parameters:
      - name: type
        in: path
        description: type name to update
        required: true
        schema:
          type: string
          enum:
          - banner
          - disclaimer
      responses:
        200:
          description: settings response
          content: {}
    put:
      tags:
      - Settings
      description: update settings by type
      operationId: updateSettingByType
      parameters:
      - name: type
        in: path
        description: type name to update
        required: true
        schema:
          type: string
          enum:
          - banner
          - disclaimer
      responses:
        200:
          description: settings response
          content: {}
  /api/{exportType}:
    get:
      tags:
      - Export
      description: export mage data (GeoJSON, KML or Shapefiles)
      operationId: export
      parameters:
      - name: exportType
        in: path
        required: true
        schema:
          type: string
          enum:
          - geojson
          - kml
          - shapefile
      - name: startDate
        in: query
        schema:
          type: string
          format: dateTime
      - name: endDate
        in: query
        schema:
          type: string
          format: dateTime
      - name: layerIds
        in: query
        description: ids of feature layers to export
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: fft
        in: query
        description: export locations
        schema:
          type: boolean
      responses:
        200:
          description: export response
          content: {}
components:
  securitySchemes:
    authToken:
      type: http
      description: >
        MAGE generates an authentication token when a client authenticates
        initially.  The client can use the token for subsequent requests until
        it expires.
      scheme: bearer
  schemas:
    CommaSeparatedTokens:
      type: string
      pattern: '\w+(,\w+)*'
    ColorHex:
      description: >
        This is a 3 or 4 byte hexadecimal string prefixed with '#' representing
        an RGB or RGBA color value, e.g. '#ff4545',
      type: string
      pattern: '#([a-fA-F0-9]{2}){3,4}'
    Count:
      type: object
      required: [ count ]
      properties:
        count:
          type: integer
    NormalizedRange:
      type: number
      format: float
      minimum: 0.0
      maximum: 1.0
    User:
      description: >
        The `User` schema defines the structure of persisted user documents as
        they exist in the database and as the server returns them in various
        responses.
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        displayName:
          type: string
        status:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
        active:
          type: boolean
        enabled:
          type: boolean
        avatarUrl:
          type: string
        iconUrl:
          type: string
        authentication:
          $ref: '#/components/schemas/AuthStatus'
        role:
          $ref: '#/components/schemas/Role'
        roleId:
          $ref: '#/components/schemas/Role/properties/id'
        icon:
          $ref: '#/components/schemas/UserIcon'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        recentEventIds:
          type: array
          items:
            $ref: '#/components/schemas/Event/properties/id'
      oneOf:
        - { required: [ role ], not: { required: [ roleId ] } }
        - { required: [ roleId ], not: { required: [ role ] } }
        - not: { required: [ role, roleId ] }
    UserRef:
      description: >
        `UserRef` is an object that references an existing user document with
        the required `id` property.  MAGE ignores any properties other than
        `id`.
      type: object
      allOf:
        - { $ref: '#/components/schemas/User' }
        - required: [ id ]
    UserIn:
      type: object
      properties:
        username: { $ref: '#/components/schemas/User/properties/username' }
        displayName: { $ref: '#/components/schemas/User/properties/displayName' }
        email: { $ref: '#/components/schemas/User/properties/email' }
        phone:
          type: string
          format: phone
        roleId: { $ref: '#/components/schemas/User/properties/roleId' }
        iconMetadata:
          type: object
          properties:
            type: { $ref: '#/components/schemas/UserIcon/properties/type' }
            color: { $ref: '#/components/schemas/UserIcon/properties/color' }
            text: { $ref: '#/components/schemas/UserIcon/properties/text' }
        icon:
          description: >
            This key is valid only when encoded as `multipart/form-data`.
            This is a binary image file attachment.
          type: string
          format: binary
        avatar:
          description: >
            This key is valid only when encoded as `multipart/form-data`.
            This is a binary image file attachment.
          type: string
          format: binary
      allOf:
        - { $ref: '#/components/schemas/UserPasswordPair' }
    UserCreate:
      allOf:
        - { $ref: '#/components/schemas/UserIn' }
        - required: [ username, displayName, password, passwordconfirm ]
    UserUpdateSelf:
      allOf:
        - { $ref: '#/components/schemas/UserIn' }
        - not:
            required: [ password, passwordconfirm, icon, iconMetadata ]
    UserIcon:
      description: >
        A user icon is the small image that appears on a map to show the user's
        location.
      type: object
      properties:
        type:
          description: The origin of the icon
          type: string
          enum:
            - create
            - upload
            - none
        color:
          description: Color is only applicable for `create` type icons.
          $ref: '#/components/schemas/ColorHex'
        text:
          description: >
            Two-letter text label that appears on the map icon; only applies to
            `create` type icons
          type: string
        contentType:
          description: The MIME type of the icon image
          type: string
        size:
          description: The image size in bytes
          type: integer
    UserPasswordPair:
      type: object
      properties:
        password:
          type: string
        passwordconfirm:
          type: string
      oneOf:
        - required: [ password, passwordconfirm ]
        - not: { required: [ password, passwordconfirm ] }
    AuthStatus:
      required:
       - type
      properties:
        type:
          type: string
        security:
          type: object
          properties:
            locked:
              type: boolean
            lockedUntil:
              type: string
              format: date-time
            invalidLoginAttempts:
              type: number
            numberOfTimesLocked:
              type: number
    ACL:
      description: >
        The ACL (Access Control List) is a mapping of user IDs to the roles and
        permissions users have to access the parent resource of the ACL.
      type: object
      additionalProperties:
        description: >
          The keys of the ACL object are user ID strings.  The values specify
          the role and permissions that the user matching the associated key
          has to access a resource.
        type: object
        properties:
          role: { $ref: '#/components/schemas/ACLRole' }
          permissions:
            description: >
              The permissions of an ACL entry are currently a static mapping
              from the role.  The ACL entry includes the permissions associated
              with the role to be more explicit about what the role means and
              how the user of the ACL entry can access the resource.
            type: array
            items: { $ref: '#/components/schemas/ACLPermission' }
    ACLRole:
      type: string
      enum:
        - OWNER
        - MANAGER
        - GUEST
    ACLPermission:
      type: string
      enum:
        - read
        - update
        - delete
    Device:
      required:
        - id
        - uid
        - name
        - description
      type: object
      properties:
        id:
          type: string
        uid:
          type: string
          description: >
            The device UID is an identifier string assigned at the application
            level.  This is usually a UUID, but can be any string the creator
            of the device chooses.
        name:
          type: string
        description:
          type: string
        registered:
          type: boolean
        userAgent:
          type: string
        appVersion:
          type: string
        userId:
          $ref: '#/components/schemas/User/properties/id'
        user:
          $ref: '#/components/schemas/User'
      oneOf:
        - { required: [ userId ], not: { required: [ user ] } }
        - { required: [ user ], not: { required: [ userId ] } }
    DeviceIn:
      type: object
      required: [ uid ]
      properties:
        uid:
          type: string
        name:
          type: string
        description:
          type: string
        userId:
          $ref: '#/components/schemas/User/properties/id'
    Team:
      description: >
        A team is simply a grouping of users that commonly operate together.
        Teams facilitate adding groups of users to events.
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserRef'
        teamEventId:
          $ref: '#/components/schemas/Event/properties/id'
          description: >
            MAGE adds this property to indicate that a team is the implicitly
            created team paired with an event for grouping the event's users
            on an individual basis.  This property references the ID of the
            event document to which the team belongs.  To add an individual
            user to an event, add the user to the team with the `teamEventId`
            property that references the target event.
        acl:
          $ref: '#/components/schemas/ACL'
    TeamIn:
      type: object
      properties:
        name: { $ref: '#/components/schemas/Team/properties/name' }
        description: { $ref: '#/components/schemas/Team/properties/description' }
        users:
          type: array
          items: { $ref: '#/components/schemas/UserRef' }
    TeamCreate:
      allOf:
        - { $ref: '#/components/schemas/TeamIn' }
        - required: [ name ]
    TeamRef:
      allOf:
        - $ref: '#/components/schemas/Team'
        - required:
          - id
    Event:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        complete:
          description: >
            When `true`, the `complete` flag indicates the event is no longer
            active.  One can reactivate a complete event at any time.
          type: boolean
        style:
          description: >
            The event's geometry style is the default style applied to each
            form of the event.  Individual forms can override the default
            style.
          $ref: '#/components/schemas/GeometryStyle'
        forms:
          type: array
          items:
            $ref: '#/components/schemas/Form'
        teams:
          type: array
          items:
            $ref: '#/components/schemas/Team'
        layers:
          type: array
        acl:
          $ref: '#/components/schemas/ACL'
    EventCreate:
      required:
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Event/properties/name'
        description:
          $ref: '#/components/schemas/Event/properties/description'
    EventUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Event/properties/name'
        description:
          $ref: '#/components/schemas/Event/properties/description'
        complete:
          $ref: '#/components/schemas/Event/properties/complete'
        forms:
          $ref: '#/components/schemas/Event/properties/forms'
    Form:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        color:
          $ref: '#/components/schemas/ColorHex'
          description: >
            The form's color is a visual discriminator that displays in the
            observation form selector when an event has multiple forms.
        primaryField:
          type: string
          description: >
            The primary field must be a single-select-type field whose choices
            determine the map symbology used to represent the observation on a
            map.
        variantField:
          type: string
          description: >
            The variant field must be another single-select-type field whose
            values can further refine the map symbology associated with the
            primary field's value of in an observation.
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
          minItems: 1
        userFields:
          type: array
          items:
            $ref: '#/components/schemas/Field/properties/name'
          description: >
            A list of field names that will be drop-downs whose choices are
            dynamically populated with the names of users in the event.
    FormCreate:
      type: object
      allOf:
        - $ref: '#/components/schemas/Form'
        - required: [ name, color, fields ]
    FormImport:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Form/properties/name'
        color:
          $ref: '#/components/schemas/Form/properties/color'
        form:
          type: string
          format: binary
          description: |
            The form is a zip file the user uploads.  THe layout of the zip
            file is the same as described in the `exportForm` operation.
      required: [ name, color, form ]
    GeometryStyle:
      type: object
      properties:
        strokeWidth:
          type: integer
        strokeOpacity:
          $ref: '#/components/schemas/NormalizedRange'
        stroke:
          type: string
    Field:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        title:
          type: string
        type:
          type: string
        value:
          type: string
        required:
          type: boolean
        choices:
          type: array
          items:
            $ref: '#/components/schemas/Choice'
    Choice:
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        value:
          type: string
    FormIcon:
      description: >
        `FormIcon` documents are the meta-data about icon images that MAGE
        clients use to mark the location on the map display of observations
        with the associated form.
      type: object
      properties:
        eventId:
          $ref: '#/components/schemas/Event/properties/id'
        formId:
          $ref: '#/components/schemas/Form/properties/id'
        primary:
          type: string
          nullable: true
          description: >
            The value of the primary form field associated with the icon
        variant:
          type: string
          nullable: true
          description: >
            The value of the variant form field associated with the icon
        relativePath:
          type: string
          pattern: ^/\\d+/\\d+(/[^/]+){0,2}$
          description: >
            The relative path of the icon image URL, which looks like
            `<event_id>/<form_id>[/<primary>[/variant]]`
    FormIconEmbedded:
      allOf:
        - $ref: '#/components/schemas/FormIcon'
        - properties:
            icon:
              type: string
              pattern: ^data:image/[^;]+;base64,[A-Za-z0-9+/]+$
              description: >
                The base-64-encoded image bytes of the icon, formatted as a
                data URL suitable for use as the value of the HTML `img` tag's
                `src` attribute
    FormIconUpload:
      type: object
      properties:
        icon:
          type: string
          format: binary
    Layer:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        type:
          type: string
        url:
          type: string
        base:
          type: boolean
        format:
          type: string
    LayerRef:
      allOf:
        - $ref: '#/components/schemas/Layer'
        - required:
          - id
    Observation:
      properties:
        id:
          type: string
        userId:
          $ref: '#/components/schemas/User/properties/id'
        deviceId:
          $ref: '#/components/schemas/Device/properties/id'
        states:
          type: array
          items:
            $ref: '#/components/schemas/ObservationState'
      allOf:
        - $ref: 'geojson.yaml#/definitions/feature'
      example: {
        "createdAt": "2019-06-21T09:47:41.637Z",
        "deviceId": "5d0b2bfe831c1a6b49f73891",
        "geometry": {
          "type": "Point",
          "coordinates": [
            -0.079953,
            51.526181
          ],
        },
        "lastModified": "2019-06-21T09:47:41.637Z",
        "properties": {
          "timestamp": "2019-06-21T09:46:57.351Z",
          "forms": [
            {
              "formId": 1,
              "field1": [
                "Features"
              ],
              "field2": "hacking",
              "field3": "2019-06-21T06:00:00.000Z"
            }
          ],
        },
        "type": "Feature",
        "userId": "5d0b2bfeeec24262f1a5fdf3",
        "favoriteUserIds": [],
        "attachments": [],
        "id": "5d0ca7bd6ef821172250b286",
        "eventId": 1,
        "url": "http://localhost:4242/api/events/1/observations/5d0ca7bd6ef821172250b286",
        "state": {
          "userId": "5d0b2bfeeec24262f1a5fdf3",
          "name": "active",
          "id": "5d0ca7bd6ef821172250b287",
          "url": "http://localhost:4242/api/events/1/observations/5d0ca7bd6ef821172250b286/states/5d0ca7bd6ef821172250b287"
        }
      }
    ObservationState:
      type: object
      properties:
        id:
          type: string
        name:
          $ref: '#/components/schemas/ObservationStateName'
        userId:
          $ref: '#/components/schemas/User/properties/id'
          description: >
            The ID of the user that set this state on the parent observation.
    ObservationStateName:
      type: string
      enum: [ active, archive ]
      description: >
        Setting an observation's state to `archive` effectively deletes the
        observation from client views, but preserves the observation data.
    ObservationImportantCreate:
      type: object
      properties:
        description:
          type: string
    Attachment:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        contentType:
          type: string
        url:
          type: string
        height:
          type: number
        width:
          type: number
        oriented:
          type: boolean
        thumbnails:
          type: array
          items:
            $ref: '#/components/schemas/Thumbnail'
    LocalCredentials:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Thumbnail:
      type: object
      properties:
        name:
          type: string
        contentType:
          type: string
        height:
          type: number
        width:
          type: number
        size:
          type: number
        minDimension:
          type: number
    Feature:
      type: object
      properties:
        id:
          type: number
        type:
          type: string
        geometry:
          type: object
          properties: {}
        properties:
          type: object
          properties: {}
    Phone:
      type: object
      properties:
        type:
          description: >
            The type of phone number currently defaults to `Main` and is
            static.
          type: string
        number:
          type: string
    FeatureStateCreate:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        userId:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        expirationDate:
          type: string
        user:
          $ref: '#/components/schemas/User'
        role:
          $ref: '#/components/schemas/Role'
    Login:
      required:
        - id
        - timestamp
      type: object
      properties:
        id:
          type: string
        timestamp:
          type: string
        device:
          $ref: '#/components/schemas/Device'
        deviceId:
          $ref: '#/components/schemas/Device/properties/id'
        user:
          $ref: '#/components/schemas/User'
        userId:
          $ref: '#/components/schemas/User/properties/id'
      allOf:
        - oneOf:
          - { required: [ deviceId ], not: { required: [ device ] } }
          - { required: [ device ], not: { required: [ deviceId ] } }
        - oneOf:
          - { required: [ userId ], not: { required: [ user ] } }
          - { required: [ user ], not: { required: [ userId ] } }
    FeatureState:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        url:
          type: string
        userId:
          type: string
    Role:
      required:
      - description
      - id
      - name
      - permissions
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
    LayerCreate:
      required:
      - name
      - type
      - url
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        url:
          type: string
        base:
          type: boolean
        format:
          type: string

  parameters:
    userIdInPath:
      in: path
      name: userId
      description: The ID of the target user document
      required: true
      example: 5d0b2bfeeec24262f1a5fdf3
      schema: { $ref: '#/components/schemas/User/properties/id' }
    eventIdInPath:
      in: path
      name: eventId
      description: The ID of the target event document
      required: true
      example: 5d0b2bfeeec24262f1a5fdf3
      schema: { $ref: '#/components/schemas/Event/properties/id' }
    formIdInPath:
      in: path
      name: formId
      description: The ID of a form within an event
      required: true
      schema: { $ref: '#/components/schemas/Form/properties/id' }
    primaryFieldValueInPath:
      in: path
      name: primary
      description: The value of the primary form field
      required: true
      schema:
        type: string
    variantFieldValueInPath:
      in: path
      name: primary
      description: The value of the variant form field
      required: true
      schema:
        type: string
    layerIdInPath:
      in: path
      name: layerId
      description: The ID of the target layer document
      required: true
      schema: { $ref: '#/components/schemas/Layer/properties/id' }
    deviceIdInPath:
      in: path
      name: deviceId
      description: The ID of the target device document
      required: true
      schema: { $ref: '#/components/schemas/Device/properties/id' }
    teamIdInPath:
      in: path
      name: teamId
      description: The ID of the target team document
      required: true
      schema: { $ref: '#/components/schemas/Team/properties/id' }
    observationIdInPath:
      in: path
      name: observationId
      description: The ID of the target observation document
      required: true
      schema: { $ref: '#/components/schemas/Observation/properties/id' }

  responses:
    FormIconInfo:
      description: Return the meta-data about a form icon.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FormIcon'
    FormIconContent:
      description: >
        Return the form icon as a base-64-encoded string value within the icon
        meta-data document, or as a binary image.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FormIconEmbedded'
        image/*:
          schema:
            type: string
            format: binary

  requestBodies:
    DeviceIn:
      description: >
        A `DeviceIn` request body specifies the keys and values to save to a
        `Device` document in the database.
      required: true
      content:
        application/json:
          schema: { $ref: '#/components/schemas/DeviceIn' }
        application/x-www-form-urlencoded:
          schema: { $ref: '#/components/schemas/DeviceIn' }
    FormIconUpload:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/FormIconUpload'
          encoding:
            icon:
              contentType: image/*
    ACLRoleUpdate:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              role:
                $ref: '#/components/schemas/ACLRole'
            required: [ role ]


